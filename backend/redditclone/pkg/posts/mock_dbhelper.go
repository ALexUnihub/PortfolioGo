// Code generated by MockGen. DO NOT EDIT.
// Source: DBHelper.go

// Package posts is a generated GoMock package.
package posts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBHelperRepo is a mock of DBHelperRepo interface.
type MockDBHelperRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBHelperRepoMockRecorder
}

// MockDBHelperRepoMockRecorder is the mock recorder for MockDBHelperRepo.
type MockDBHelperRepoMockRecorder struct {
	mock *MockDBHelperRepo
}

// NewMockDBHelperRepo creates a new mock instance.
func NewMockDBHelperRepo(ctrl *gomock.Controller) *MockDBHelperRepo {
	mock := &MockDBHelperRepo{ctrl: ctrl}
	mock.recorder = &MockDBHelperRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBHelperRepo) EXPECT() *MockDBHelperRepoMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockDBHelperRepo) FindAll(repo *ItemMemoryRepository) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", repo)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDBHelperRepoMockRecorder) FindAll(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDBHelperRepo)(nil).FindAll), repo)
}

// FindAllUserPosts mocks base method.
func (m *MockDBHelperRepo) FindAllUserPosts(repo *ItemMemoryRepository, userName string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUserPosts", repo, userName)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUserPosts indicates an expected call of FindAllUserPosts.
func (mr *MockDBHelperRepoMockRecorder) FindAllUserPosts(repo, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUserPosts", reflect.TypeOf((*MockDBHelperRepo)(nil).FindAllUserPosts), repo, userName)
}

// FindCategory mocks base method.
func (m *MockDBHelperRepo) FindCategory(repo *ItemMemoryRepository, category string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCategory", repo, category)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCategory indicates an expected call of FindCategory.
func (mr *MockDBHelperRepoMockRecorder) FindCategory(repo, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCategory", reflect.TypeOf((*MockDBHelperRepo)(nil).FindCategory), repo, category)
}

// FindPostByID mocks base method.
func (m *MockDBHelperRepo) FindPostByID(repo *ItemMemoryRepository, id string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPostByID", repo, id)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPostByID indicates an expected call of FindPostByID.
func (mr *MockDBHelperRepoMockRecorder) FindPostByID(repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPostByID", reflect.TypeOf((*MockDBHelperRepo)(nil).FindPostByID), repo, id)
}

// InsertPost mocks base method.
func (m *MockDBHelperRepo) InsertPost(repo *ItemMemoryRepository, post *Post, userID, userLogin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPost", repo, post, userID, userLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPost indicates an expected call of InsertPost.
func (mr *MockDBHelperRepoMockRecorder) InsertPost(repo, post, userID, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPost", reflect.TypeOf((*MockDBHelperRepo)(nil).InsertPost), repo, post, userID, userLogin)
}

// RemovePost mocks base method.
func (m *MockDBHelperRepo) RemovePost(repo *ItemMemoryRepository, pathURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePost", repo, pathURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePost indicates an expected call of RemovePost.
func (mr *MockDBHelperRepoMockRecorder) RemovePost(repo, pathURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePost", reflect.TypeOf((*MockDBHelperRepo)(nil).RemovePost), repo, pathURL)
}

// UpdatePost mocks base method.
func (m *MockDBHelperRepo) UpdatePost(repo *ItemMemoryRepository, postID string, post *Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", repo, postID, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockDBHelperRepoMockRecorder) UpdatePost(repo, postID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockDBHelperRepo)(nil).UpdatePost), repo, postID, post)
}
