// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package posts is a generated GoMock package.
package posts

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostsRepo is a mock of PostsRepo interface.
type MockPostsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepoMockRecorder
}

// MockPostsRepoMockRecorder is the mock recorder for MockPostsRepo.
type MockPostsRepoMockRecorder struct {
	mock *MockPostsRepo
}

// NewMockPostsRepo creates a new mock instance.
func NewMockPostsRepo(ctrl *gomock.Controller) *MockPostsRepo {
	mock := &MockPostsRepo{ctrl: ctrl}
	mock.recorder = &MockPostsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsRepo) EXPECT() *MockPostsRepoMockRecorder {
	return m.recorder
}

// AddCommentInPostRepository mocks base method.
func (m *MockPostsRepo) AddCommentInPostRepository(postID, data, userID, userLogin string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommentInPostRepository", postID, data, userID, userLogin)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommentInPostRepository indicates an expected call of AddCommentInPostRepository.
func (mr *MockPostsRepoMockRecorder) AddCommentInPostRepository(postID, data, userID, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommentInPostRepository", reflect.TypeOf((*MockPostsRepo)(nil).AddCommentInPostRepository), postID, data, userID, userLogin)
}

// CreatePost mocks base method.
func (m *MockPostsRepo) CreatePost(r *http.Request, userID, userLogin string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", r, userID, userLogin)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsRepoMockRecorder) CreatePost(r, userID, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostsRepo)(nil).CreatePost), r, userID, userLogin)
}

// DeleteCommentInPostRepository mocks base method.
func (m *MockPostsRepo) DeleteCommentInPostRepository(postID, commID, userID, userLogin string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentInPostRepository", postID, commID, userID, userLogin)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentInPostRepository indicates an expected call of DeleteCommentInPostRepository.
func (mr *MockPostsRepoMockRecorder) DeleteCommentInPostRepository(postID, commID, userID, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentInPostRepository", reflect.TypeOf((*MockPostsRepo)(nil).DeleteCommentInPostRepository), postID, commID, userID, userLogin)
}

// DeletePostFromRepo mocks base method.
func (m *MockPostsRepo) DeletePostFromRepo(r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostFromRepo", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostFromRepo indicates an expected call of DeletePostFromRepo.
func (mr *MockPostsRepoMockRecorder) DeletePostFromRepo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostFromRepo", reflect.TypeOf((*MockPostsRepo)(nil).DeletePostFromRepo), r)
}

// DownVotePost mocks base method.
func (m *MockPostsRepo) DownVotePost(postID, userID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownVotePost", postID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownVotePost indicates an expected call of DownVotePost.
func (mr *MockPostsRepoMockRecorder) DownVotePost(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownVotePost", reflect.TypeOf((*MockPostsRepo)(nil).DownVotePost), postID, userID)
}

// GetAllPosts mocks base method.
func (m *MockPostsRepo) GetAllPosts() ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsRepoMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostsRepo)(nil).GetAllPosts))
}

// GetAllUserPosts mocks base method.
func (m *MockPostsRepo) GetAllUserPosts(userName string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserPosts", userName)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserPosts indicates an expected call of GetAllUserPosts.
func (mr *MockPostsRepoMockRecorder) GetAllUserPosts(userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserPosts", reflect.TypeOf((*MockPostsRepo)(nil).GetAllUserPosts), userName)
}

// GetCategory mocks base method.
func (m *MockPostsRepo) GetCategory(category string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", category)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockPostsRepoMockRecorder) GetCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockPostsRepo)(nil).GetCategory), category)
}

// GetPost mocks base method.
func (m *MockPostsRepo) GetPost(id string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", id)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostsRepoMockRecorder) GetPost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostsRepo)(nil).GetPost), id)
}

// UnVotePost mocks base method.
func (m *MockPostsRepo) UnVotePost(postID, userID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVotePost", postID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVotePost indicates an expected call of UnVotePost.
func (mr *MockPostsRepoMockRecorder) UnVotePost(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVotePost", reflect.TypeOf((*MockPostsRepo)(nil).UnVotePost), postID, userID)
}

// UpVotePost mocks base method.
func (m *MockPostsRepo) UpVotePost(postID, userID string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpVotePost", postID, userID)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpVotePost indicates an expected call of UpVotePost.
func (mr *MockPostsRepoMockRecorder) UpVotePost(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpVotePost", reflect.TypeOf((*MockPostsRepo)(nil).UpVotePost), postID, userID)
}
